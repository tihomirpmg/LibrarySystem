// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LibrarySystems.Pages.Title
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using LibrarySystems;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\_Imports.razor"
using LibrarySystems.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\Pages\Title\TitleUpsert.razor"
using LibrarySystem.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\Pages\Title\TitleUpsert.razor"
using LibrarySystem.Bussines.Repos.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\Pages\Title\TitleUpsert.razor"
using LibrarySystems.Service.IService;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/add-title/create")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/add-title/edit/{Id:int}")]
    public partial class TitleUpsert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 93 "C:\Users\User\OneDrive\Работен плот\LibrarySystems\LibrarySystems\Pages\Title\TitleUpsert.razor"
       
    [Parameter]
    public int? Id { get; set; }
    private TitleDTO TitleModel { get; set; } = new TitleDTO();
    private string Create { get; set; } = "Create";
    private ImagesDTO TitleImage { get; set; } = new ImagesDTO();
    private List<string> DeleteImageNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(LibrarySystem.Common.Details.Role_Admin))
        {
            NavigationManager.NavigateTo("/identity/account/login");
        }

        if (Id != null)
        {
            Create = "Update";
            TitleModel = await TitleRepository.GetBook(Id.Value);
            if (TitleModel?.TitleImages != null)
            {
                TitleModel.ImageUrls = TitleModel.TitleImages.Select(u => u.BookImageUrl).ToList();
            }
        }
        else
        {
            TitleModel = new TitleDTO();
        }
    }

    private async Task HandleLibraryBookUpsert()
    {
        try
        {
            var bookDetailsByName = await TitleRepository.IsBookUnique(TitleModel.Name, TitleModel.Id);
            if (bookDetailsByName != null)
            {
                return;
            }

            if (TitleModel.Id != 0 && Create == "Update")
            {
                var updateBookResult = await TitleRepository.UpdateBook(TitleModel.Id, TitleModel);
                if (TitleModel.ImageUrls != null && TitleModel.ImageUrls.Any())
                {
                    if (DeleteImageNames != null && DeleteImageNames.Any())
                    {
                        foreach (var deletedImageName in DeleteImageNames)
                        {
                            var imageName = deletedImageName.Replace($"BookImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await ImagesRepository.DeleteImageByImageUrl(deletedImageName);
                        }
                    }

                    await AddTitleImage(updateBookResult);
                }
            }
            else
            {
                var createdResult = await TitleRepository.CreateBook(TitleModel);
                await AddTitleImage(createdResult);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        NavigationManager.NavigateTo("add-title");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".gif")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }

                    if (images.Any())
                    {
                        if (TitleModel.ImageUrls != null && TitleModel.ImageUrls.Any())
                        {
                            TitleModel.ImageUrls.AddRange(images);
                        }
                        else
                        {
                            TitleModel.ImageUrls = new List<string>();
                            TitleModel.ImageUrls.AddRange(images);
                        }
                    }
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private async Task AddTitleImage(TitleDTO bookDetails)
    {
        foreach (var imageUrl in TitleModel.ImageUrls)
        {
            if (TitleModel.TitleImages == null || TitleModel.TitleImages.Where(x => x.BookImageUrl == imageUrl).Count() == 0)
            {
                TitleImage = new ImagesDTO()
                {
                    BookId = bookDetails.Id,
                    BookImageUrl = imageUrl
                };
                await ImagesRepository.CreateNewImage(TitleImage);
            }
        }
    }
    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = TitleModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"BookImages/", "");
            if ((TitleModel.Id == 0) && Create == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                DeleteImageNames ??= new List<string>();
                DeleteImageNames.Add(imageUrl);
            }
            TitleModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IImagesRepository ImagesRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITitleRepository TitleRepository { get; set; }
    }
}
#pragma warning restore 1591
